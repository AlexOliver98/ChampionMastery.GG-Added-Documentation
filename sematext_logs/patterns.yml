# From https://raw.githubusercontent.com/sematext/logagent-js/a962d2efa185a98582d45fa13ac85cd5de10060b/patterns.yml
#
# PARSER DEFINITIONS FILE IN YML FORMAT
#
# Please use 'ts' as feild name for dates and time
# RegexTools: https://regex101.com/#javascript

# Sensitive data can be replaced with a hashcode (sha1)
# it applies to fields matching the field names by a regular expression
# Note: this function is not optimized (yet) and might cause 10-15% performance hit
#autohash: !!js/regexp /user|client_ip|password|email|credit_card_number|payment_info/i
# set the hash function (default sha256), sha256,sha512
#hashFunction: sha512

debug: false
# set originalLine to false when auothash fields
# the original line might include sensitive data!
originalLine: false
# default seperator for multiline logs,
# which don't have a blockStart property
# The default /^\S{2,}/ would match typical stack traces
# All lines that start with a whitespace  or contain only one char
# would be attached to previous lines
multiline:
  # defaultSeparator: ^\S{2,}
  # Match lines that don't start with multiple spaces or "Caused by"
  defaultSeparator: ^(?! {2,}|\t|[cC]aused by)

# Please note when geoIP: true
# There will be a slight delay during first start of logagent while maxmind
# database is downloaded. Logagent downloads the MaxMind database every 24hrs or
# during startup.
geoIP: false

# The database is stored in a temporary directory
# The path could be modified via env. variable MAXMIND_DB_DIR
maxmindDbDir: /tmp/

# post process all JSON input
json:
  enabled: true
  #  autohashFields:
  #    _HOSTNAME: true
  debug: false
#  removeFields:
#    - stacktrace
#    - msg
#    - level
#    - time
#  mapFields:
#    msg: message
#    level: severity
#    time: '@timestamp'
#  transform: !!js/function >
#   function (sourceName, parsedObject, config) {
#    // map fields
#    Object.keys(config.mapFields).forEach(function (f) {
#      if (parsedObject[f] !== undefined) {
#        parsedObject[config.mapFields[f]] = parsedObject[f]
#        if (config.debug) {
#         console.log('map ' + f + ' to ' + config.mapFields[f] + ': ' + parsedObject[config.mapFields[f]])
#       }
#      }
#    })
#    // remove fields
#    for (var i=0; i<config.removeFields.length; i++) {
#       if (config.debug) {
#         console.log('delete ' + config.removeFields[i])
#       }
#       delete parsedObject[config.removeFields[i]]
#    }
#   }

# The global transform function is called for each parsed line.
# A good place to do add global fields, custom date processing, or special parsers.
#globalTransform: !!js/function >
#  function (source, parsedObject) {
#    // this function is called after parsing
#    // regardless of the logging source
#    // for pattern specific functions use transform in pattern definitions
#    // this.geopip lookups for ip adresses
#    // this.moment for date parsing
#    // Example:
#    // this.enrichGeoIp(parsedObject, 'client_ip')
#  }

# IMPORTANT:
# PATTERNS ARE EVALUATED SEQUENTIALLY FOR EACH LOG EVENT. PUT MORE COMPLEX AND MORE SPECIFIC PATTERNS FIRST.
# As soon as a pattern matches a log event the rest of the patterns are skipped.
#
# To test your pattern: cat myTest.log | logagent -n <pattern name here> -yml -f mypatterns.yml
# A pattern name are things like 'kubernetes hyperkube' or 'Elasticsearch' or 'Apache Solr' below.

patterns:
  - # cmgg_database_populator logs
    sourceName: !!js/regexp /cmgg_database_populator_*/
    # [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n
    blockStart: !!js/regexp /^\[([a-zA-Z\d]{0,5}) {0,5}\] (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{0,4}) \[(.*?)\] (.*?) - /
    match:
      - type: cmgg_database_populator
        regex: !!js/regexp /^\[([a-zA-Z\d]{0,5}) {0,5}\] (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{0,4}) \[(.*?)\] (.*?) - ([\s\S]*)/
        fields: [severity, ts, thread:string, logger:string, message]
        dateFormat: yyyy-MM-dd HH:mm:ss.SSS

  - # sematext/agent logs
    sourceName: !!js/regexp /sematext\/agent|containerd|dockerd/
    blockStart: !!js/regexp /^panic\:|^unexpected fault address|^fatal error\:|(^INFO|^ERRO|^WARN|^FAT|^TRAC|^DEB)|^time=|^S{2,}/
    match:
      - type: sematext_agent_golang
        regex: !!js/regexp /time=(\S+)\slevel=(\S+?)\smsg="(.+?)"\ssource="(.+?)"/i
        fields: [ts, severity, message, source]
        dateFormat: YY-MM-DDTHH:mm:ss
      - type: sematext_agent_golang
        regex: !!js/regexp /([A-Z]+)\[(.+?)\]\s(.*)/i
        fields: [severity, ts, message]
        dateFormat: YY-MM-DDTHH:mm:ss

  - # Elasticsearch
    blockStart: !!js/regexp /^[\d{4}-\d{2}-\d{2}[\s|T][\d+|\:]+.\d+|log4j\:\S+\s/
    sourceName: !!js/regexp /elasticsearch/
    match:
      - type: elasticsearch_slow_log
        regex: !!js/regexp /^\[(\d{4}-\d{2}-\d{2}[\s|T][\d+|\:]+.\d+)\]\[(.+?)\s*\]\[(\S{0,512})\s*\]\s*\[(.+?)\]\s\[(\S+?)\]\[(\d+)\]\s.+took_millis\[(\d+)\].+types\[(.*?)\].+stats\[(.*?)\].*search_type\[(.*?)\].+total_shards\[(.*?)\].+source\[(.*?)\],/i
        fields:
          - ts
          - severity:string
          - class_name:string
          - node_name:string
          - index_name:string
          - shard_number:number
          - took_millis:number
          - types:string
          - stats:string
          - search_type:string
          - total_shards:number
          - source:string
      - type: elasticsearch
        regex: !!js/regexp /^\[(\d{4}-\d{2}-\d{2}[\s|T][\d+|\:]+.\d+)\]\[(.+?)\s*\]\[(\S{0,512})\s*\]\s*\[(.+?)\]\s([\s|\S]+)/
        fields: [ts,severity,class_name,node_name,message]
        dateFormat: YYYY-MM-DD HH:mm:ss,SS
      - type: elasticsearch
        regex: !!js/regexp ^\[(\d{4}-\d{2}-\d{2}\s[\d+|\:]+.\d+)\]\[(.+?)\]\[(\S{0,512})\s*\]\s*\s([\s|\S]+)
        fields: [ts,severity,class_name,message]
        dateFormat: YYYY-MM-DD HH:mm:ss,SS

  - # REDIS
    # name of the docker image
    # example: "1:M 22 Jul 21:58:28.146 # Server started, Redis version 3.0.2"
    sourceName: !!js/regexp /redis/i
    match:
      - type: redis
        fields: [pid,node_type,ts,message]
        regex: !!js/regexp /^(\d+):\w+\s(\d\d\s\w+.+)\s\W\s(.*)/
      - type: redis
        fields: [pid,ts,message]
        regex: !!js/regexp /^\[(\d+)\]\s(.+?)\s\*\s(.+)/i
        dateFormat: DD MMM HH:mm:ss.SSS
      - type: redis
        regex: !!js/regexp /^(.*)/i
        fields: message

  - # mysql
    # 2015-07-25 14:11:35 0 [Note] mysqld (mysqld 5.6.26) starting as process 1 ...
    sourceName: !!js/regexp /mysql/
    match:
      - regex: !!js/regexp /^(\d{4}-\d{2}-\d{2}\s[\d|\:]+)\s(\d+)\s\[(.+?)\]\s+(.*)/
        fields: [ts,pid,level,message]
        dateFormat: YYYY-MM-DD HH:mm:ss
        type: mysql

  - #  Web Logs
    sourceName: !!js/regexp /httpd|access_log|apache2|nginx|sematext\/frontend-app/
    match:
      - type: access_log_combined
        regex: !!js/regexp ^([0-9a-f.:]+)\s(-|\S+)\s(-|\S+)\s\[(.*)\]\s\"(\w+)\s(\S+)\s{0,1}(.*)\" ([0-9|\-]+) ([0-9|\-]+) \"([^\"]+)\" \"([^\"]+)\"
        fields:
          - client_ip:string
          - remote_id:string
          - user:string
          - ts
          - method:string
          - path:string
          - protocol:string
          - status_code:number
          - size:number
          - referer:string
          - user_agent:string
        geoIP: client_ip
        dateFormat: DD/MMM/YYYY:HH:mm:ss ZZ
        transform: !!js/function >
          function transformMessage (p) {
            p.message = p.method + ' ' + p.path
            if(p.status_code === '-') {
              p.status_code = 0
            }
            if(p.size === '-') {
              p.size = 0
            }
          }
      # nginx proxy jwilder/nginx-proxy
      - regex: !!js/regexp /^(\S+)\s+(-|.+?)\s+(-|.+?)\s+\[(.*)\]\s\"(\S+)\s(\S+)\s(\S+)\"\s(\d+)\s(\d+|\"-\"|-)\s+"{0,1}(.+?)"{0,1}\s+"{0,1}([\S|\s]+)"{0,1}/i
        type: access_common
        fields:
          - proxy_service:string
          - virtual_host:string
          - client_ip:string
          - remote_id:string
          - user:String
          - ts
          - method:string
          - path:string
          - http_version:string
          - status_code:number
          - size:number
          - url:string
          - user_agent:string
        dateFormat: DD/MMM/YYYY:HH:mm:ss ZZ
        geoIP: client_ip
        #transform: !!js/function >
        #  function transformMessage (p) {
        #    p.message = p.method + ' ' + p.path
        #    if(p.status_code === '-') {
        #      p.status_code = 0
        #    }
        #    if(p.size === '-') {
        #      p.size = 0
        #    }
        #  }
      - regex: !!js/regexp ^(\S+)\s+(-|.+?)\s+(-|.+?)\s+\[(.*)\]\s\"(\S+)\s(\S+)\s(\S+)\"\s(\d+)\s(\d+|\"-\"|-)
        type: access_common
        fields:
          - client_ip:string
          - remote_id:string
          - user:string
          - ts
          - method:string
          - path:string
          - http_version:string
          - status_code:number
          - size:number
        geoIP: client_ip
        dateFormat: DD/MMM/YYYY:HH:mm:ss ZZ
        #transform: !!js/function >
        #  function transformMessage (p) {
        #    p.message = p.method + ' ' + p.path
        #    if(p.status_code === '-') {
        #      p.status_code = 0
        #    }
        #    if(p.size === '-') {
        #      p.size = 0
        #    }
        #  }
      - type: nginx_error_log
        regex: !!js/regexp /^(\d{4}\/\d{2}\/\d{2}\s[\d|\:]+)\s\[(.+?)]\s(\d+)#(\d+)\:\s(.*)/
        fields: [ts,level,pid,tid,message]
        dateformat: YYYY/MM/DD HH:mm:ss

      - type: apache_error_log
        regex: !!js/regexp /^\[(\w{3} \w{3} \d{2} [\d|\:]+\s\d+)\] \[(.+?)\] \[client ([\d|\.]+)\] (.+)/
        fields: [ts,level,client_ip,message]
        dateformat: ddd MMM DD hh:mm:ss.SSS YYYY

      # Apache MPM events
      - regex: !!js/regexp /^\[(.+?)\]\s+\[(.+?)\]\s+\[(.+?)\]\s+(.+)/
        fields: [ts,event_type,processInfo,message]
        type: apache_mpm
        dateformat: ddd MMM DD hh:mm:ss.SSS YYYY

  - # Traefik access_log
    sourceName: !!js/regexp /traefik/
    match:
      - type: traefik_access_log
        regex: !!js/regexp ^([0-9a-f.:]+)\s(-|\S+)\s(-|\S+)\s\[(.*)\]\s\"(\w+)\s(\S+)\s{0,1}(.*)\"\s([0-9|\-]+)\s([0-9|\-]+)\s\"([^\"]+)\"\s\"([^\"]+)\"\s([0-9|\-]+)\s\"(.+)\"\s\"(.+)\"\s([0-9]+)ms
        fields:
          - client_ip:string
          - remote_id:string
          - user:string
          - ts
          - method:string
          - path:string
          - protocol:string
          - status_code:number
          - size:number
          - referer:string
          - user_agent:string
          - req_count:string # https://github.com/containous/traefik/blob/master/middlewares/accesslog/logger_formatters.go#L45
          - frontend_name:string
          - backend_url:string
          - response_time:number
        geoIP: client_ip
        dateFormat: DD/MMM/YYYY:HH:mm:ss ZZ
        transform: !!js/function >
          function transformMessage (p) {
            p.message = p.method + ' ' + p.path
            if(p.status_code === '-') {
              p.status_code = 0
            }
            if(p.size === '-') {
              p.size = 0
            }
          }

  - # Docker Swarm
    sourceName: !!js/regexp /swarm/ # catch all .log files
    match:
      -
        type: docker
        regex: !!js/regexp /^time="(.*)\slevel=(\S+)\smsg="(.+?)"\saddr="(.+?)"\sdiscovery="(.+?)"/
        fields: [ts,severity,message,address,discovery]
      -
        type: docker
        regex: !!js/regexp /^time="(.*)\slevel=(\S+)\smsg="(.+?)/
        fields: [ts,severity,message]

  - # Logagent-js ISO timestamp + message
    sourceName: !!js/regexp /logagent/
    match:
      -
        type: logagent-js
        regex: !!js/regexp /^(\[\d|\:|\-]+Z)\s([\S|\s]+)/
        fields: [ts,message]
        dateFormat: YYYY-MM-DDTHHmmss

dateFormats: [
  'DD/MMM/YYYY:HH:mm:ss ZZ', #apache
  'MMM D HH:mm:ss',
  'MMM DD HH:mm:ss',
  'DD MMM HH:mm:ss.S',
  'DD MMM HH:mm:ss',
  'DDD MMM DD HH:mm:ss',
  'YYYY-MM-DD',
  'YYYY-MM-DD HH:mm',
  'YYYY-MM-DDTHH:mm',
  'YYYY-MM-DD HHmm',
  'YYYYMMDD HH:mm',
  'YYYYMMDD HHmm',
  'YYYYMMDD',
  'YYYY-MM-DDTHHmm',
  'YYYYMMDDTHH:mm',
  'YYYYMMDDTHHmm',
  'YYYYMMDDTHH:mm',
  'YYYY-MM-DD HH:mm:ss',
  'YYYY-MM-DD HHmmss',
  'YYYY-MM-DDTHH:mm:ss',
  'YYYY-MM-DDTHHmmss',
  'YYYYMMDDTHHmmss',
  'YYYY-MM-DD HH:mmZ',
  'YYYY-MM-DD HHmmZ',
  'YYYY-MM-DD HH:mm:ssZ',
  'YYYY-MM-DD HHmmssZ',
  'YYYYMMDD HH:mmZ',
  'YYYYMMDD HHmmZ',
  'YYYY-MM-DDTHH:mmZ',
  'YYYY-MM-DDTHHmmZ',
  'YYYY-MM-DDTHH:mm:ssZ',
  'YYYY-MM-DDTHHmmssZ',
  'YYYYMMDDTHH:mmZ',
  'YYYYMMDDTHHmmZ',
  'YYYYMMDDTHHmmZ',
  'YYYYMMDDTHHmmssZ',
  'YYYYMMDDTHH:mmZ'
]
